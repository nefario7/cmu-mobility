
% ConvertSymbolicToFunctions.m  - Converts symbolic expressions of the 
%    humanoid model into matlab functions which are being used.
%
% NOTE: This script together with the HumanoidSymbolicMath script need 
% only be computed once to generate the functions. 
%
% H. Geyer, Nov 2018
%

% run parameter definition script
p = DefineHumanoidParams;

% assign parameter values to symbolic variables
l1 =p.l1; l2 =p.l2; l3 =p.l3; l4 =p.l4; l5 =p.l5; 
d1 =p.d1; d2 =p.d2; d3 =p.d3; d4 =p.d4; d5 =p.d5; 
m1 =p.m1; m2 =p.m2; m3 =p.m3; m4 =p.m4; m5 =p.m5; 
I1 =p.I1; I2 =p.I2; I3 =p.I3; I4 =p.I4; I5 =p.I5; 


%% Function QP_COMPUTEKINANDDYNTERMS used in the QP
% -------------------------------------------------

% substitute numerical parameter values in symbolic expressions (subs) and convert fractions to decimal representation (vpa)
M        = vpa(subs(M));       % manipulator mass matrix
h        = vpa(subs(h));       % term h=C*dq+N
Jcm      = vpa(subs(Jcm));     % center of mass Jacobian used in QP constraints
Jfp      = vpa(subs(Jfp));     % foot point Jacobian
dJcmxdq  = vpa(subs(dJcmxdq)); % term dJ*dq for CoM Jacobian used in QP constraints
dJfpxdq  = vpa(subs(dJfpxdq)); % term dJ*dq for FP Jacobian used in QP constraints

CommentText = {' '; ...
               ' This function was automatically generated from symbolic expressions by the command matlabFunction.'; ...
               ' The symbolic expressions are derived in the script HUMANOIDSYMBOLICMATH. The model parameters in'; ...
               ' these epressions are converted into numerical values based on the values given in the script'; ...
               ' DEFINEHUMANOIDPARAMS. Finally, the resulting functions of only q and dq are converted into this'; ...
               ' Matlab function QP_COMPUTEKINANDDYNTERMS.'; ...
               ' '; ...
               ' NOTE: If the humanoid parameters are changed, this function becomes invalid, and it has to be'; ...
               ' generated anew following the outlined procedure.'; ...
               ' '; ...
               ' In:'; ...
               ' q1,q2,q3,q4,q5 : joint angles'; ...
               ' dq1,dq2,dq3,dq4,dq5: joint angular velocities'; ...
               ' '; ...
               ' Out:';...
               ' M : Humanoid mass matrix M(q)'; ...
               ' h : Coriolis and gravitational terms h(q,dq)=C(q,dq)*dq+N(q)'; ...
               ' Jcm : CoM Jacobian Jcm'; ...
               ' Jfp : Foot Point (FP) Jacobian Jfp'; ...
               ' dJcmxdq : Vector dJcm*dq meeded in QP constraint equation'; ...
               ' dJfpxdq : Vector dJfp*dq meeded in QP cost equation'; ...
               ' '; ...
               ' H. Geyer, Nov 2018'; ...
               ' '; ...
               '%% assign individual angles and angular velocities from vector inputs';...
               'q1 = q(1); q2 = q(2);  q3= q(3);  q4= q(4);  q5= q(5);'; ...
               'dq1=dq(1); dq2=dq(2); dq3=dq(3); dq4=dq(4); dq5=dq(5);'; ...
               ' '; ...
               '%% Code below was automatically generated by command matlabFunction'; ...
               '% -----------------------------------------------------------------'; ...
               ' '};
    
% matlab function for QP
matlabFunction(M,h, Jcm, Jfp, dJcmxdq, dJfpxdq, 'File', 'QP_ComputeKinAndDynTerms.m','Vars',[q1 q2 q3 q4 q5 dq1 dq2 dq3 dq4 dq5],'Optimize',true,'Comment',CommentText);


%% Function SIM_COMPUTEHUMANOIDDYNAMICS used in the Humanoid Simulator
% ----------------------------------------------------------------

% substitute numerical parameter values in symbolic expressions (subs) and convert fractions to decimal representation (vpa)
M        = vpa(subs(M));       % manipulator mass matrix
h        = vpa(subs(h));       % term h=C*dq+N

CommentText = {' '; ...
               ' This function was automatically generated from symbolic expressions by the command matlabFunction.'; ...
               ' The symbolic expressions are derived in the script HUMANOIDSYMBOLICMATH. The model parameters in'; ...
               ' these epressions are converted into numerical values based on the values given in the script'; ...
               ' DEFINEHUMANOIDPARAMS. Finally, the resulting functions of only q, dq and tau are converted into this'; ...
               ' Matlab function SIM_COMPUTEHUMANOIDDYNAMICS.'; ...
               ' '; ...
               ' NOTE: If the humanoid parameters are changed, this function becomes invalid, and it has to be'; ...
               ' generated anew following the outlined procedure.'; ...
               ' '; ...
               ' In:'; ...
               ' q, dq: joint angles and velocities'; ...
               ' tau: joint torques'; ...
               ' '; ...
               ' Out:';...
               ' ddq : humanoid joint accelerations'; ...
               ' '; ...
               ' H. Geyer, Nov 2018'; ...
               ' '; ...
               '%% assign individual angles, angular velocities and torques from vector inputs';...
               'q1 = q(1); q2 = q(2);  q3= q(3);  q4= q(4);  q5= q(5);'; ...
               'dq1=dq(1); dq2=dq(2); dq3=dq(3); dq4=dq(4); dq5=dq(5);'; ...
               ' '; ...
               '%% Code below was automatically generated by command matlabFunction'; ...
               '% -----------------------------------------------------------------'; ...
               ' '};


% matlab function for simulator
matlabFunction(M,h, 'File', 'SIM_ComputeHumanoidDynamics.m','Vars',[q1 q2 q3 q4 q5 dq1 dq2 dq3 dq4 dq5],'Optimize',true,'Comment',CommentText);


%% Function SIM_COMPUTEHUMANOIDKINEMATICS used in the Humanoid Simulator
% ----------------------------------------------------------------------

CM_pos   = vpa(subs(rCM));     % humanoid CoM position
CM_vel   = vpa(subs(drCM));    % humanoid CoM velocity
Jcm      = vpa(subs(Jcm));     % center of mass Jacobian used in ddrCM = Jcm*ddq + dJcm*dq
dJcmxdq  = vpa(subs(dJcmxdq)); % term dJ*dq for CoM Jacobian used in ddrCM = Jcm*ddq + dJcm*dq
Jfp      = vpa(subs(Jfp));     % foot point Jacobian
dJfpxdq  = vpa(subs(dJfpxdq)); % term dJ*dq for FP Jacobian used to compute foot accelerations


CommentText = {' '; ...
               ' This function was automatically generated from symbolic expressions by the command matlabFunction.'; ...
               ' The symbolic expressions are derived in the script HUMANOIDSYMBOLICMATH. The model parameters in'; ...
               ' these epressions are converted into numerical values based on the values given in the script'; ...
               ' DEFINEHUMANOIDPARAMS. Finally, the resulting functions of only q, dq and tau are converted into this'; ...
               ' Matlab function SIM_COMPUTEHUMANOIDKINEMATICS.'; ...
               ' '; ...
               ' NOTE: If the humanoid parameters are changed, this function becomes invalid, and it has to be'; ...
               ' generated anew following the outlined procedure.'; ...
               ' '; ...
               ' In:'; ...
               ' q, dq: joint angles and velocities'; ...
               ' '; ...
               ' Out:';...
               ' CM_pos, CM_vel : CoM position and velocity'; ...
               ' Jcm, dJcmxdq : Center of Mass Jacobian Jcm and related term dJ*dq needed for computing current CoM acceleration'; ... 
               ' Jfp, dJfpxdq : Foot Point Jacobian and related term dJ*dq needed for computing current FP acceleration'; ...
               ' '; ...
               ' H. Geyer, Nov 2018'; ...
               ' '; ...
               '%% assign individual angles, angular velocities and accelerations from vector inputs';...
               'q1 = q(1); q2 = q(2);  q3= q(3);  q4= q(4);  q5= q(5);'; ...
               'dq1=dq(1); dq2=dq(2); dq3=dq(3); dq4=dq(4); dq5=dq(5);'; ...
               ' '; ...
               '%% Code below was automatically generated by command matlabFunction'; ...
               '% -----------------------------------------------------------------'; ...
               ' '};

% matlab function for simulator
matlabFunction(CM_pos,CM_vel, Jcm,dJcmxdq, Jfp, dJfpxdq, 'File', 'SIM_ComputeHumanoidKinematics.m','Vars',[q1 q2 q3 q4 q5 dq1 dq2 dq3 dq4 dq5],'Optimize',true,'Comment',CommentText);

