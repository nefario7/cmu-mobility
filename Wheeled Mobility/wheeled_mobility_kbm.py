# -*- coding: utf-8 -*-
"""Wheeled Mobility KBM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14ItUE3C44W8GwGRkeQT_8w7IJQvu4MDA
"""

import numpy as np
import scipy.signal as sig
import matplotlib.pyplot as plt

class PepyBicycle():
    lf = 1.5
    lr = 1.5
    def __init__(self, velocity, sampling):
        self.v = velocity
        self.x = 0
        self.y = 0
        self.psi = 0
        self.delta = 0

        self.time = sampling

    #Kinematic Bicycle Model
    def step(self, delta):
        self.delta = delta
        self.x = self.x + (self.v * np.cos(self.psi)) * self.time
        self.y = self.y + (self.v * np.sin(self.psi)) * self.time
        self.psi = self.psi + (self.v * np.tan(self.delta) / (self.lr + self.lf)) * self.time
        return self.x, self.x

    def show_position(self):
        print("Current Position : x = {}, y = {}, psi = {}\n".format(self.x, self.y, self.psi))

    def reset(self):
        self.x = 0
        self.y = 0
        self.psi = 0
        self.delta = 0

def steering_plot(time, steering, axs, ax, constant=None, velocity = None):
    lbl = str(constant) + "@" + str(velocity) + "m/s"
    axs.plot(time, steering["delta"], label=lbl)
    axs.legend(loc="upper right")

    for i, t in enumerate(time):
        steering["x"][i] = pepy.x
        steering["y"][i] = pepy.y
        pepy.step(steering["delta"][i])
    
    ax.plot(steering["x"], steering["y"], label=lbl)
    ax.legend(loc="upper right")

sampling_rate = 0.01
start_time = 0
end_time = 20
time = np.arange(start_time, end_time, sampling_rate)

fig, ax = plt.subplots(1, 3, figsize=(30,10))
figs, axs = plt.subplots(1, 3, figsize=(30, 2))

steering = {1: {"delta" : np.ones_like(time), 
                "x": np.zeros_like(time), 
                "y":np.zeros_like(time)},
            2: {"delta" : np.sin(time), 
                "x": np.zeros_like(time), 
                "y":np.zeros_like(time)},
            3: {"delta" : sig.square(time, duty=0.5), 
                "x": np.zeros_like(time), 
                "y":np.zeros_like(time)}}

# Non-zero Constant Steering
pepy = PepyBicycle(velocity=10, sampling=sampling_rate)
for n in [0.1, 0.2, 0.5, 1.0]: 
    pepy.reset()
    steering[1]['delta'] = np.ones_like(time)
    steering[1]['delta'] *= n
    steering_plot(time, steering[1], axs[0], ax[0], n, 10)

# Sinusoidal Steering
for v in [5, 10, 50]:
    for c in [0.1, 0.25]:
        pepy = PepyBicycle(velocity=v, sampling=sampling_rate)
        pepy.reset()
        steering[2]['delta'] = np.sin(time)
        steering[2]['delta'] *= c
        steering_plot(time, steering[2], axs[1], ax[1], c, v)

# Square Wave Steering
for v in [5, 10]:
    for s in [0.1, 0.25]:
        pepy = PepyBicycle(velocity=v, sampling=sampling_rate)
        pepy.reset()
        steering[3]['delta'] = sig.square(time, duty=0.5)
        steering[3]['delta'] *= s
        steering_plot(time, steering[3], axs[2], ax[2], s, v)